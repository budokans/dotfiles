{
  "version": 3,
  "sources": ["../src/init.ts"],
  "sourcesContent": ["import { execSync } from 'node:child_process';\nimport {\n  copyFileSync,\n  mkdirSync,\n  readdirSync,\n  rmSync,\n  statSync,\n} from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\ntype CopyOptions = {\n  readonly excludeDirs: readonly string[];\n};\n\nconst copyFiles = (src: string, dest: string, options: CopyOptions): void => {\n  const files = readdirSync(src);\n\n  files.forEach((file) => {\n    if (options.excludeDirs.includes(file)) {\n      return;\n    }\n\n    const srcPath = join(src, file);\n    const destPath = join(dest, file);\n\n    if (statSync(srcPath).isDirectory()) {\n      mkdirSync(destPath, { recursive: true });\n      copyFiles(srcPath, destPath, options);\n    } else {\n      copyFileSync(srcPath, destPath);\n    }\n  });\n};\n\nconst init = async (): Promise<void> => {\n  const tempDir = join(process.cwd(), '.temp-starter');\n\n  try {\n    // For local testing, use the local files\n    const isDev = process.env['NODE_ENV'] === 'development';\n    let templateDir: string;\n\n    if (isDev) {\n      // Use local files (adjust this path to point to your typescript-starter directory)\n      templateDir = join(__dirname, '../../typescript-react-starter');\n      console.log('Using local template files from:', templateDir);\n    } else {\n      // Create and clean temp directory\n      mkdirSync(tempDir, { recursive: true });\n\n      console.log('\uD83D\uDCE6 Downloading template...');\n      execSync(\n        'pnpm add @budokans/typescript-react-starter --prefix .temp-starter',\n        {\n          stdio: 'inherit',\n        }\n      );\n\n      templateDir = join(\n        tempDir,\n        'node_modules/@budokans/typescript-react-starter'\n      );\n    }\n\n    const targetDir = process.cwd();\n\n    console.log('\uD83D\uDCCB Copying template files...');\n    copyFiles(templateDir, targetDir, {\n      excludeDirs: ['node_modules', '.git', 'dist', '.temp-starter'],\n    });\n\n    // Cleanup temp directory if it was created\n    if (!isDev && tempDir) {\n      rmSync(tempDir, { recursive: true, force: true });\n    }\n\n    // Install dependencies\n    console.log('\uD83D\uDCE5 Installing dependencies...');\n    execSync('pnpm install', { stdio: 'inherit' });\n\n    console.log('\\n\u2728 TypeScript project initialized successfully!');\n  } catch (error) {\n    // Cleanup on error\n    if (tempDir) {\n      rmSync(tempDir, { recursive: true, force: true });\n    }\n    console.error(\n      'Error:',\n      error instanceof Error ? error.message : String(error)\n    );\n    process.exit(1);\n  }\n};\n\nvoid init();\n"],
  "mappings": ";AAAA,OAAS,YAAAA,MAAgB,qBACzB,OACE,gBAAAC,EACA,aAAAC,EACA,eAAAC,EACA,UAAAC,EACA,YAAAC,MACK,UACP,OAAS,WAAAC,EAAS,QAAAC,MAAY,YAC9B,OAAS,iBAAAC,MAAqB,WAE9B,IAAMC,EAAYH,EAAQE,EAAc,YAAY,GAAG,CAAC,EAMlDE,EAAY,CAACC,EAAaC,EAAcC,IAA+B,CAC7DV,EAAYQ,CAAG,EAEvB,QAASG,GAAS,CACtB,GAAID,EAAQ,YAAY,SAASC,CAAI,EACnC,OAGF,IAAMC,EAAUR,EAAKI,EAAKG,CAAI,EACxBE,EAAWT,EAAKK,EAAME,CAAI,EAE5BT,EAASU,CAAO,EAAE,YAAY,GAChCb,EAAUc,EAAU,CAAE,UAAW,EAAK,CAAC,EACvCN,EAAUK,EAASC,EAAUH,CAAO,GAEpCZ,EAAac,EAASC,CAAQ,CAElC,CAAC,CACH,EAEMC,EAAO,SAA2B,CACtC,IAAMC,EAAUX,EAAK,QAAQ,IAAI,EAAG,eAAe,EAEnD,GAAI,CAEF,IAAMY,EAAQ,QAAQ,IAAI,WAAgB,cACtCC,EAEAD,GAEFC,EAAcb,EAAKE,EAAW,gCAAgC,EAC9D,QAAQ,IAAI,mCAAoCW,CAAW,IAG3DlB,EAAUgB,EAAS,CAAE,UAAW,EAAK,CAAC,EAEtC,QAAQ,IAAI,mCAA4B,EACxClB,EACE,qEACA,CACE,MAAO,SACT,CACF,EAEAoB,EAAcb,EACZW,EACA,iDACF,GAGF,IAAMG,EAAY,QAAQ,IAAI,EAE9B,QAAQ,IAAI,qCAA8B,EAC1CX,EAAUU,EAAaC,EAAW,CAChC,YAAa,CAAC,eAAgB,OAAQ,OAAQ,eAAe,CAC/D,CAAC,EAGG,CAACF,GAASD,GACZd,EAAOc,EAAS,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAIlD,QAAQ,IAAI,sCAA+B,EAC3ClB,EAAS,eAAgB,CAAE,MAAO,SAAU,CAAC,EAE7C,QAAQ,IAAI;AAAA,oDAAkD,CAChE,OAASsB,EAAO,CAEVJ,GACFd,EAAOc,EAAS,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAElD,QAAQ,MACN,SACAI,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CACvD,EACA,QAAQ,KAAK,CAAC,CAChB,CACF,EAEKL,EAAK",
  "names": ["execSync", "copyFileSync", "mkdirSync", "readdirSync", "rmSync", "statSync", "dirname", "join", "fileURLToPath", "__dirname", "copyFiles", "src", "dest", "options", "file", "srcPath", "destPath", "init", "tempDir", "isDev", "templateDir", "targetDir", "error"]
}
